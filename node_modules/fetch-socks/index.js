"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.socksDispatcher = exports.socksConnector = void 0;
const socks_1 = require("socks");
const undici_1 = require("undici");
/**
 * Since socks does not guess HTTP ports, we need to do that.
 *
 * @param protocol Upper layer protocol, "http:" or "https:"
 * @param port A string containing the port number of the URL, maybe empty.
 */
function resolvePort(protocol, port) {
    return port ? Number.parseInt(port) : protocol === "http:" ? 80 : 443;
}
/**
 * Create an undici connector which establish the connection through socks proxies.
 *
 * If the proxies is an empty array, it will connect directly.
 *
 * @param proxies The proxy server to use or the list of proxy servers to chain.
 * @param tlsOpts TLS upgrade options.
 */
function socksConnector(proxies, tlsOpts = {}) {
    const chain = Array.isArray(proxies) ? proxies : [proxies];
    const { timeout = 10e3 } = tlsOpts;
    const undiciConnect = (0, undici_1.buildConnector)(tlsOpts);
    return async (options, callback) => {
        let { protocol, hostname, port, httpSocket } = options;
        for (let i = 0; i < chain.length; i++) {
            const next = chain[i + 1];
            const destination = i === chain.length - 1 ? {
                host: hostname,
                port: resolvePort(protocol, port),
            } : {
                port: next.port,
                host: next.host ?? next.ipaddress,
            };
            const socksOpts = {
                command: "connect",
                proxy: chain[i],
                timeout,
                destination,
                existing_socket: httpSocket,
            };
            try {
                const r = await socks_1.SocksClient.createConnection(socksOpts);
                httpSocket = r.socket;
            }
            catch (error) {
                return callback(error, null);
            }
        }
        // httpSocket may not exist when the chain is empty.
        if (httpSocket && protocol !== "https:") {
            return callback(null, httpSocket.setNoDelay());
        }
        /*
         * There are 2 cases here:
         * If httpSocket doesn't exist, let undici make a connection.
         * If httpSocket exists & protocol is HTTPS, do TLS upgrade.
         */
        return undiciConnect({ ...options, httpSocket }, callback);
    };
}
exports.socksConnector = socksConnector;
/**
 * Create a undici Agent with socks connector.
 *
 * If the proxies is an empty array, it will connect directly.
 *
 * @param proxies The proxy server to use or the list of proxy servers to chain.
 * @param options Additional options passed to the Agent constructor.
 */
function socksDispatcher(proxies, options = {}) {
    const { connect, ...rest } = options;
    return new undici_1.Agent({ ...rest, connect: socksConnector(proxies, connect) });
}
exports.socksDispatcher = socksDispatcher;
